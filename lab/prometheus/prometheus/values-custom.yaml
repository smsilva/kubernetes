global:
  cluster: undefined-cluster-name
  remoteWrite:
    enabled : true

server:
  global:
    scrape_interval: 15s
    scrape_timeout: 10s
    evaluation_interval: 1m

  retention: "6h"

  extraVolumeMounts:
    - name: newrelic
      mountPath: "/etc/secrets/newrelic"
      readOnly: true

  extraVolumes:
    - name: newrelic
      secret:
        secretName: newrelic-license
        optional: true

  resources:
    requests:
      cpu: 500m
      memory: 512Mi

    limits:
      cpu: 1000m
      memory: 2Gi

  service:
    type: NodePort
    nodePort: 32081

prometheus-node-exporter:
  enabled: true

serverFiles:
  recording_rules.yml:
    groups:
      - name: "istio.sum_by"
        interval: 10s
        rules:
          - record: "workload:istio_requests:by_destination_workload:rate5m"
            expr: |
              sum(irate(istio_requests_total{reporter="destination"}[5m]))
              by (
                destination_workload,
                destination_workload_namespace
              )

          - record: "workload:istio_request_duration_milliseconds_bucket:p95:rate5m"
            expr: |
              histogram_quantile(0.95,
                sum(irate(istio_request_duration_milliseconds_bucket{reporter="source"}[5m]))
                by (
                  destination_workload,
                  destination_workload_namespace,
                  source_workload,
                  source_workload_namespace,
                  le
                )
              )

      - name: "istio.sum"
        interval: 10s
        rules:
          - record: "workload:istio_requests_total"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_requests_total)

          - record: "workload:istio_request_bytes_count"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_count)

          - record: "workload:istio_request_bytes_sum"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_sum)

          - record: "workload:istio_response_bytes_count"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_count)

          - record: "workload:istio_response_bytes_sum"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_sum)

          - record: "workload:istio_tcp_sent_bytes_total"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_sent_bytes_total)

          - record: "workload:istio_tcp_received_bytes_total"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_received_bytes_total)

          - record: "workload:istio_tcp_connections_opened_total"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_connections_opened_total)

          - record: "workload:istio_tcp_connections_closed_total"
            expr: |
              sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_connections_closed_total)

  prometheus.yml:
    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/rules
      - /etc/config/alerts

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets:
              - localhost:9090

      - job_name: 'kubernetes-apiserver'

        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - default
            selectors:
              - role: "service"
                label: "component=apiserver"

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true

        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_service_name
              - __meta_kubernetes_endpoint_port_name
            regex: default;kubernetes;https
            action: keep

      - job_name: 'kubernetes-coredns'
        honor_labels: true

        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - kube-system
            selectors:
              - role: "pod"
                label: "k8s-app=kube-dns"

        relabel_configs:
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_pod_name
            separator: '/'
            regex: 'kube-system/coredns.+'
            action: keep

          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)

          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)

          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2

          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)

          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace

          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_service_name

          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true

        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

          - target_label: __address__
            replacement: kubernetes.default.svc:443

          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics

      - job_name: 'kubernetes-nodes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true

        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

          - target_label: __address__
            replacement: kubernetes.default.svc:443

          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

      - job_name: 'kubernetes-pods'
        honor_labels: true

        kubernetes_sd_configs:
          - role: pod

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true

          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
            action: drop
            regex: true

          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__

          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)

          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+?)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace

          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod

          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed|Completed
            action: drop

      - job_name: 'kubernetes-state-metrics'
        honor_labels: true

        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - prometheus

        relabel_configs:
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_pod_name
            separator: '/'
            regex: 'prometheus/.*kube-state-metrics.*'
            action: keep

          - source_labels:
              - __meta_kubernetes_pod_name
            target_label: instance
            action: replace

          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)

      - job_name: 'kubernetes-node-exporter'
        honor_labels: true

        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - prometheus

        relabel_configs:
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_pod_name
            separator: '/'
            regex: 'prometheus/.*node-exporter.*'
            action: keep

          - source_labels:
              - __meta_kubernetes_pod_name
            target_label: instance
            action: replace

          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node

          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
