# -*- mode: ruby -*-
# vi:set ft=ruby sw=2 ts=2 sts=2:

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

# Servers Count
MASTER_NODES_COUNT = 1
WORKER_NODES_COUNT = 2
GLUSTERFS_NODES_COUNT = 0

# Memory
DNS_MEMORY="#{1 * 512}"
LOAD_BALANCER_MEMORY="#{1 * 512}"
MASTER_NODE_MEMORY_SIZE="#{2 * 1024}"
WORKER_NODE_MEMORY_SIZE="#{2 * 1024}"
GLUSTER_NODE_MEMORY_SIZE="#{2 * 1024}"

# Network
DOMAIN_NAME="example.com"
IP_NETWORK = "192.168.56."
MASTER_IP_START = 10
NODE_IP_START = 20
GLUSTERFS_IP_START = 30
IP_DNS = "#{IP_NETWORK}" + "2"
IP_LOADBALANCER = "#{IP_NETWORK}" + "#{MASTER_IP_START}"

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  config.vm.box_version = "20230302.0.0"
  config.vm.box_check_update = false

  # DNS
  config.vm.define "dns" do |node|
    node.vm.provider "virtualbox" do |vb|
      vb.memory = "#{DNS_MEMORY}"
      vb.cpus = 1
    end
    node.vm.hostname = "dns"
    node.vm.network :private_network, ip: "#{IP_DNS}", auto_config: false
    node.vm.network "forwarded_port", guest: 22, host: 2224

    node.vm.provision "setup-hosts-file", :type => "shell", :path => "ubuntu/setup-hosts-file.sh" do |s|
      s.args = ["#{IP_DNS}","#{DOMAIN_NAME}"]
    end

    node.vm.provision "update-system-config", type: "shell", :path => "ubuntu/update-system-config.sh"
    node.vm.provision "update-system", type: "shell", :path => "ubuntu/update-system.sh"
    node.vm.provision "install-dns-server-bind9", type: "shell", :path => "ubuntu/install-dns-server-bind9.sh" do |s|
      s.args = ["#{DOMAIN_NAME}","#{MASTER_IP_START}","#{MASTER_NODES_COUNT}","#{NODE_IP_START}","#{WORKER_NODES_COUNT}","#{IP_NETWORK}","#{IP_DNS}","#{GLUSTERFS_NODES_COUNT}","#{GLUSTERFS_IP_START}"]
    end

    node.vm.provision "file", source: "ubuntu/netplan-vagrant-template.yaml", destination: "${HOME}/.netplan-vagrant-template.yaml"
    node.vm.provision "file", source: "ubuntu/watch-for-interfaces-and-routes.sh", destination: "${HOME}/watch-for-interfaces-and-routes.sh"

    node.vm.provision "setup-netplan", type: "shell", :path => "ubuntu/setup-netplan.sh" do |s|
      s.args = ["#{IP_DNS}","#{DOMAIN_NAME}","#{IP_DNS}"]
    end
  end

  # Load Balancer
  config.vm.define "loadbalancer" do |node|
    node.vm.provider "virtualbox" do |vb|
      vb.memory = "#{LOAD_BALANCER_MEMORY}"
      vb.cpus = 1
    end
    node.vm.hostname = "loadbalancer"
    node.vm.network :private_network, ip: "#{IP_LOADBALANCER}", auto_config: false
    node.vm.network "forwarded_port", guest: 22, host: 2225

    node.vm.provision "setup-hosts-file", :type => "shell", :path => "ubuntu/setup-hosts-file.sh" do |s|
      s.args = ["#{IP_LOADBALANCER}","#{DOMAIN_NAME}"]
    end

    node.vm.provision "file", source: "ubuntu/netplan-vagrant-template.yaml", destination: "${HOME}/.netplan-vagrant-template.yaml"
    node.vm.provision "file", source: "ubuntu/watch-for-interfaces-and-routes.sh", destination: "${HOME}/watch-for-interfaces-and-routes.sh"

    node.vm.provision "setup-netplan", type: "shell", :path => "ubuntu/setup-netplan.sh" do |s|
      s.args = ["#{IP_LOADBALANCER}","#{DOMAIN_NAME}","#{IP_DNS}"]
    end

    node.vm.provision "update-system-config", type: "shell", :path => "ubuntu/update-system-config.sh"

    node.vm.provision "update-system", type: "shell", :path => "ubuntu/update-system.sh"

    node.vm.provision "install-haproxy", type: "shell", :path => "ubuntu/install-haproxy.sh" do |s|
      s.args = ["#{IP_LOADBALANCER}","#{DOMAIN_NAME}","#{MASTER_IP_START}","#{MASTER_NODES_COUNT}"]
    end
  end

  # Master Nodes - Control Plane
  (1..MASTER_NODES_COUNT).each do |i|
    config.vm.define "master-#{i}" do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.memory = "#{MASTER_NODE_MEMORY_SIZE}"
        vb.cpus = 2
      end

      IP_SERVER="#{IP_NETWORK}" + "#{MASTER_IP_START + i}"

      node.vm.hostname = "master-#{i}"
      node.vm.network :private_network, ip: "#{IP_SERVER}", auto_config: false
      node.vm.network "forwarded_port", guest: 22, host: "#{2730 + i}"

      node.vm.provision "setup-hosts-file", :type => "shell", :path => "ubuntu/setup-hosts-file.sh" do |s|
        s.args = ["#{IP_SERVER}","#{DOMAIN_NAME}"]
      end

      node.vm.provision "file", source: "ubuntu/netplan-vagrant-template.yaml", destination: "${HOME}/.netplan-vagrant-template.yaml"
      node.vm.provision "file", source: "ubuntu/watch-for-interfaces-and-routes.sh", destination: "${HOME}/watch-for-interfaces-and-routes.sh"

      node.vm.provision "setup-netplan", type: "shell", :path => "ubuntu/setup-netplan.sh" do |s|
        s.args = ["#{IP_SERVER}","#{DOMAIN_NAME}","#{IP_DNS}"]
      end

      node.vm.provision "update-system-config", type: "shell", :path => "ubuntu/update-system-config.sh"

      node.vm.provision "update-system", type: "shell", :path => "ubuntu/update-system.sh"
      node.vm.provision "install-cri", type: "shell", :path => "ubuntu/install-containerd.sh"
      node.vm.provision "install-tools", type: "shell", :path => "ubuntu/install-tools.sh"
    end
  end

  # Worker Nodes
  (1..WORKER_NODES_COUNT).each do |i|
    config.vm.define "worker-#{i}" do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.memory = "#{WORKER_NODE_MEMORY_SIZE}"
        vb.cpus = 2
      end

      IP_SERVER="#{IP_NETWORK}" + "#{NODE_IP_START + i}"

      node.vm.hostname = "worker-#{i}"
      node.vm.network :private_network, ip: "#{IP_SERVER}", auto_config: false
      node.vm.network "forwarded_port", guest: 22, host: "#{2740 + i}"

      node.vm.provision "setup-hosts-file", :type => "shell", :path => "ubuntu/setup-hosts-file.sh" do |s|
        s.args = ["#{IP_SERVER}","#{DOMAIN_NAME}"]
      end

      node.vm.provision "file", source: "ubuntu/netplan-vagrant-template.yaml", destination: "${HOME}/.netplan-vagrant-template.yaml"
      node.vm.provision "file", source: "ubuntu/watch-for-interfaces-and-routes.sh", destination: "${HOME}/watch-for-interfaces-and-routes.sh"

      node.vm.provision "setup-netplan", type: "shell", :path => "ubuntu/setup-netplan.sh" do |s|
        s.args = ["#{IP_SERVER}","#{DOMAIN_NAME}","#{IP_DNS}"]
      end

      node.vm.provision "update-system-config", type: "shell", :path => "ubuntu/update-system-config.sh"

      node.vm.provision "update-system", type: "shell", :path => "ubuntu/update-system.sh"
      node.vm.provision "install-cri", type: "shell", :path => "ubuntu/install-containerd.sh"
    end
  end

  # GlusterFS Servers for External Cluster
  (1..GLUSTERFS_NODES_COUNT).each do |i|
    config.vm.define "gluster-#{i}" do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.memory = "#{GLUSTER_NODE_MEMORY_SIZE}"
        vb.cpus = 1
        
        unless File.exist?("disks/gluster-#{i}/gluster-disk-1.vdi")
          vb.customize ['createhd', '--filename', "disks/gluster-#{i}/gluster-disk-1.vdi", '--size', 1 * 1024]
        end
        
        vb.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', "disks/gluster-#{i}/gluster-disk-1.vdi"]
      end

      IP_SERVER="#{IP_NETWORK}" + "#{GLUSTERFS_IP_START + i}"

      node.vm.hostname = "gluster-#{i}"
      node.vm.network :private_network, ip: "#{IP_SERVER}", auto_config: false
      node.vm.network "forwarded_port", guest: 22, host: "#{2840 + i}"

      node.vm.provision "setup-hosts-file", :type => "shell", :path => "ubuntu/setup-hosts-file.sh" do |s|
        s.args = ["#{IP_SERVER}","#{DOMAIN_NAME}"]
      end

      node.vm.provision "file", source: "ubuntu/netplan-vagrant-template.yaml", destination: "${HOME}/.netplan-vagrant-template.yaml"
      node.vm.provision "file", source: "ubuntu/watch-for-interfaces-and-routes.sh", destination: "${HOME}/watch-for-interfaces-and-routes.sh"

      node.vm.provision "setup-netplan", type: "shell", :path => "ubuntu/setup-netplan.sh" do |s|
        s.args = ["#{IP_SERVER}","#{DOMAIN_NAME}","#{IP_DNS}"]
      end

      node.vm.provision "update-system-config", type: "shell", :path => "ubuntu/update-system-config.sh"

      node.vm.provision "update-system", type: "shell", :path => "ubuntu/update-system.sh"

      node.vm.provision "install-glusterfs", :type => "shell", :path => "ubuntu/install-glusterfs.sh" do |s|
        s.args = ["#{GLUSTERFS_NODES_COUNT}","#{GLUSTERFS_IP_START}","#{DOMAIN_NAME}"]
      end
    end
  end
  
end
